--------------------------------------------------------------
CHAPTER 6 - ADVANCED RELATIONSHIPS & SERIALIZATION
--------------------------------------------------------------

- Defining Requirements for a Complex RESTful Web Service

    - We are going to define a RESTful web service for registering components for drones that are
        grouped into drone categories.  These are the resources we will need:

        1. Drone categories (DroneCategory model)
        2. Drones (Drone model)
        3. Pilots (Pilot model)
        4. Competitions (Competition model)


        DroneCategory [name]
        Drone [DroneCategory FK, name, manufacturing_date, has_competed, created_date]
        Pilot [name, gender, number_of_races, created_date]
        Competition [Pilot FK, Drone FK, distance(ft), date]


    - Here are the operations we will support:

        HTTP verb       Scope                               Semantics
        ---------------------------------------------------------------------------------------------------------------------------
        GET             Drone category                      Retrieve a single drone category. The drone category must include a 
                                                              list of URLs for each drone resource that belongs to the drone 
                                                              category.

        GET             Collection of drone categories      Retrieve all the stored drone categories in the collection, sorted by 
                                                              their name in ascending order. Each drone category must include a list 
                                                              of URLs for each drone resource that belongs to the drone category.

        POST            Collection of drone categories      Create a new drone category in the collection.

        PUT             Drone category                      Update an existing drone category.

        PATCH           Drone category                      Update one or more fields of an existing drone category.

        DELETE          Drone category                      Delete an existing drone category.

        GET             Drone                               Retrieve a single drone. The drone must include its drone category 
                                                              description.

        GET             Collection of drones                Retrieve all the stored drones in the collection, sorted by their name in 
                                                              ascending order. Each drone must include its drone category description.

        POST            Collection of drones                Create a new drone in the collection.

        PUT             Drone                               Update an existing drone.

        PATCH           Drone                               Update one or more fields of an existing drone.

        DELETE          Drone                               Delete an existing drone.

        GET             Pilot                               Retrieve a single pilot. The pilot must include a list of the registered 
                                                              competitions, sorted by distance in descending order. The list must include 
                                                              all the details for the competition in which the pilots and his related 
                                                              drone participated.

        GET             Collection of pilots                Retrieve all the stored pilots in the collection, sorted by their name in 
                                                              ascending order. Each pilot must include a list of the registered 
                                                              competitions, sorted by distance in descending order. The list must include all 
                                                              the details for the competition in which the pilot and his related drone 
                                                              participated.

        POST            Collection of pilots                Create a new pilot in the collection.

        PUT             Pilot                               Update an existing pilot.

        PATCH           Pilot                               Update one or more fields of an existing pilot.

        DELETE          Pilot                               Delete an existing pilot.

        GET             Competition                         Retrieve a single competition. The competition must include the pilot's name that 
                                                              made the drone reach a specific distance and the drone's name.

        GET             Collection of competitions          Retrieve all the stored competitions in the collection, sorted by distance in 
                                                              descending order. Each competition must include the pilot's name that made the 
                                                              drone reach a specific distance and the drone's name.

        POST            Collection of competitions          Create a new competition in the collection. The competition must be related to 
                                                              an existing pilot and an existing drone.

        PUT             Competition                         Update an existing competition.

        PATCH           Competition                         Update one or more fields of an existing competition.

        DELETE          Competition                         Delete an existing competition.



    - Here are the actual URIs we need to support:

        Scope                                     URI
        ------------------------------------------------------------------------
        Collection of drone categories            /drone-categories/

        Drone category                            /drone-category/{id}

        Collection of drones                      /drones/

        Drone                                     /drone/{id}

        Collection of pilots                      /pilots/

        Pilot                                     /pilot/{id}

        Collection of competitions                /competitions/

        Competition                               /competition/{id}



    - Note that the HTTP PUT method is used to replace an entire resource, and the HTTP PATCH method is used
        to update one or more fields of an existing resource.



- Creating a New App with Django

    # In restful01 project directory
    $ python manage.py startapp drones



- Configuring a New Web Service

    # drones/apps.py
    from django.apps import AppConfig 

    class DronesConfig(AppConfig): 
        name = 'drones'


    # Add to restful01/settings.py
    INSTALLED_APPS = [ 
        'django.contrib.admin', 
        'django.contrib.auth', 
        'django.contrib.contenttypes', 
        'django.contrib.sessions', 
        'django.contrib.messages', 
        'django.contrib.staticfiles', 
        # Django REST framework 
        'rest_framework', 
        # Drones application 
        'drones.apps.DronesConfig', 
    ] 



- Defining Many-to-One Relationships with models.ForeignKey

    - Here are our models:

        from django.db import models 
 
 
        class DroneCategory(models.Model): 
            name = models.CharField(max_length=250) 
         
            class Meta: 
                ordering = ('name',) 
         
            def __str__(self): 
                return self.name 
         
         
        class Drone(models.Model): 
            name = models.CharField(max_length=250) 
            drone_category = models.ForeignKey( 
                DroneCategory, 
                related_name='drones', 
                on_delete=models.CASCADE) 
            manufacturing_date = models.DateTimeField() 
            has_it_competed = models.BooleanField(default=False) 
            inserted_timestamp = models.DateTimeField(auto_now_add=True) 
         
            class Meta: 
                ordering = ('name',) 
         
            def __str__(self): 
                return self.name 
         
         
        class Pilot(models.Model): 
            MALE = 'M' 
            FEMALE = 'F' 
            GENDER_CHOICES = ( 
                (MALE, 'Male'), 
                (FEMALE, 'Female'), 
            ) 
            name = models.CharField(max_length=150, blank=False, default='') 
            gender = models.CharField( 
                max_length=2, 
                choices=GENDER_CHOICES, 
                default=MALE, 
            ) 
            races_count = models.IntegerField() 
            inserted_timestamp = models.DateTimeField(auto_now_add=True) 
         
            class Meta: 
                ordering = ('name',) 
         
            def __str__(self): 
                return self.name 
         
         
        class Competition(models.Model): 
            pilot = models.ForeignKey( 
                Pilot, 
                related_name='competitions', 
                on_delete=models.CASCADE) 
            drone = models.ForeignKey( 
                Drone, 
                on_delete=models.CASCADE) 
            distance_in_feet = models.IntegerField() 
            distance_achievement_date = models.DateTimeField() 
         
            class Meta: 
                # Order by distance in descending order 
                ordering = ('-distance_in_feet',)



- Running Migrations that Generate Relationships

    - We're going to switch to using Postgres instead of SQLite.

        # Create a new Postgres database
        $ sudo -u postgres createdb drones


        # Create database user and add 
        $ psql

        >>> CREATE ROLE username WITH LOGIN PASSWORD 'password';
        >>> GRANT ALL PRIVILEGES ON DATABASE drones TO username;
        >>> ALTER USER username CREATEDB;
        >>> \q


    - We need to update the settings.py:

        DATABASES = { 
            'default': { 
                'ENGINE': 'django.db.backends.postgresql', 
                'NAME': 'drones', 
                'USER': 'username', 
                'PASSWORD': 'password', 
                'HOST': '127.0.0.1', 
                'PORT': '5432',       # 5432 is default
            } 
        }


    - Remove the toys urls from the 'restful01/urls.py' so migrations won't be run:

        urlpatterns = [
        ]


    - Install psycopg2:

        $ pip install psycopg2


    - Create and run migrations:

        $ python manage.py makemigrations drones
        $ python manage.py migrate



- Analyzing the Database

    # List the tables in the database
    $ psql --username=username --dbname=drones --command="\dt"

     Schema |            Name            | Type  |  Owner   
    --------+----------------------------+-------+----------
     public | auth_group                 | table | username
     public | auth_group_permissions     | table | username
     public | auth_permission            | table | username
     public | auth_user                  | table | username
     public | auth_user_groups           | table | username
     public | auth_user_user_permissions | table | username
     public | django_admin_log           | table | username
     public | django_content_type        | table | username
     public | django_migrations          | table | username
     public | django_session             | table | username
     public | drones_competition         | table | username
     public | drones_drone               | table | username
     public | drones_dronecategory       | table | username
     public | drones_pilot               | table | username
    (14 rows)


    # List the contents of each of our tables
    $ psql --username=username --dbname=drones --command="SELECT * FROM drones_dronecategory;"
    $ psql --username=username --dbname=drones --command="SELECT * FROM drones_drone;"
    $ psql --username=username --dbname=drones --command="SELECT * FROM drones_pilot;"
    $ psql --username=username --dbname=drones --command="SELECT * FROM drones_competition;"



- Configuring Serialization and Deserialization with Relationships

    - The 'HyperlinkedModelSerializer' is a type of ModelSerializer that uses hyperlinked relationships
        instead of primary key relationships.  It represents the relationship to other model instances
        with hyperlinks.

        # drones/serializers.py
        from rest_framework import serializers 

        from drones.models import DroneCategory 
        from drones.models import Drone 
        from drones.models import Pilot 
        from drones.models import Competition 
        import drones.views 
         
         
        class DroneCategorySerializer(serializers.HyperlinkedModelSerializer): 
            drones = serializers.HyperlinkedRelatedField( 
                many=True, 
                read_only=True, 
                view_name='drone-detail') 
         
            class Meta: 
                model = DroneCategory 
                fields = ( 
                    'url', 
                    'pk', 
                    'name', 
                    'drones')


    - The many=True, read_only=True indicates that the relationship is 1:M and read-only.  

    - The view_name='drone-detail' indicates to the browsable API to use the drone detail view to render
        the hyperlink when it is clicked.



- Defining Hyperlinks with serializers.HyperlinkedModelSerializer

    - Next, we'll add the serializer for Drone:

        # drones/serializer.py
        class DroneSerializer(serializers.HyperlinkedModelSerializer): 
            # Display the category name 
            drone_category = serializers.SlugRelatedField(queryset=DroneCategory.objects.all(), slug_field='name') 
         
            class Meta: 
                model = Drone 
                fields = ( 
                    'url', 
                    'name', 
                    'drone_category', 
                    'manufacturing_date', 
                    'has_it_competed', 
                    'inserted_timestamp') 


        - A 'SlugRelatedField' is a read-write field that represents the target of the relationship by a unique 
            slug attribute.  The browsable API has to display the possible options for the related drone category 
            in a dropdown field in a form, and Django will use the expression in the 'queryset' attribute to 
            populate the values in it.

        - Note that we don't want to include the 'pk' in 'fields' in the Meta class.


    - Here is the serializer for Competition:

        class CompetitionSerializer(serializers.HyperlinkedModelSerializer):
            # Display all the details for the related drone
            drone = DroneSerializer()

            class Meta:
                model = Competition
                fields = (
                    'url',
                    'pk',
                    'distance_in_feet',
                    'distance_achievement_date',
                    'drone')


    - Here is the serializer for Pilot:

        class PilotSerializer(serializers.HyperlinkedModelSerializer): 
            competitions = CompetitionSerializer(many=True, read_only=True) 
            gender = serializers.ChoiceField(choices=Pilot.GENDER_CHOICES) 
            gender_description = serializers.CharField( 
                source='get_gender_display',  
                read_only=True) 
         
            class Meta: 
                model = Pilot 
                fields = ( 
                    'url', 
                    'name', 
                    'gender', 
                    'gender_description', 
                    'races_count', 
                    'inserted_timestamp',
                    'competitions') 


    - Finally, we create a 'PilotCompetitionSerializer' class to model the Pilot as master and
        Competition as detail relationship.

        class PilotCompetitionSerializer(serializers.ModelSerializer): 
            # Display the pilot's name 
            pilot = serializers.SlugRelatedField(queryset=Pilot.objects.all(), slug_field='name') 
            # Display the drone's name 
            drone = serializers.SlugRelatedField(queryset=Drone.objects.all(), slug_field='name') 
         
            class Meta: 
                model = Competition 
                fields = ( 
                    'url', 
                    'pk', 
                    'distance_in_feet', 
                    'distance_achievement_date', 
                    'pilot', 
                    'drone')



- Full List of Serializers

    Serializer class name         Superclass                     Related model
    ------------------------------------------------------------------------------------------------
    DroneCategorySerializer       HyperlinkedModelSerializer     DroneCategory
    DroneSerializer               HyperlinkedModelSerializer     Drone
    CompetitionSerializer         HyperlinkedModelSerializer     Competition
    PilotSerializer               HyperlinkedModelSerializer     Pilot
    PilotCompetitionSerializer    ModelSerializer                Competition



- Working with Class-Based Views

    - We will write our RESTful web service by coding class-based views.  We will inherit from generic
        views to reuse behavior built-in in Django REST Framework.  These are the 2 most important
        generic class views:

        1. ListCreateAPIView
             This class view implements the GET method that retrieves a listing of a queryset and the
               POST method that creates a model instance.

        2. RetrieveUpdateDestroyAPIView
             This class view implements the GET, DELETE, PUT, and PATCH methods on a model instance.



- Taking Advantage of Generic Classes and Viewsets

    - Here are our views:

        # drones/views.py
        from django.shortcuts import render 

        from rest_framework import generics 
        from rest_framework.response import Response 
        from rest_framework.reverse import reverse 

        from drones.models import DroneCategory 
        from drones.models import Drone 
        from drones.models import Pilot 
        from drones.models import Competition 
        from drones.serializers import DroneCategorySerializer 
        from drones.serializers import DroneSerializer 
        from drones.serializers import PilotSerializer 
        from drones.serializers import PilotCompetitionSerializer 
         
         
        class DroneCategoryList(generics.ListCreateAPIView): 
            queryset = DroneCategory.objects.all() 
            serializer_class = DroneCategorySerializer 
            name = 'dronecategory-list' 
         
         
        class DroneCategoryDetail(generics.RetrieveUpdateDestroyAPIView): 
            queryset = DroneCategory.objects.all() 
            serializer_class = DroneCategorySerializer 
            name = 'dronecategory-detail' 
         
         
        class DroneList(generics.ListCreateAPIView): 
            queryset = Drone.objects.all() 
            serializer_class = DroneSerializer 
            name = 'drone-list' 
         
         
        class DroneDetail(generics.RetrieveUpdateDestroyAPIView): 
            queryset = Drone.objects.all() 
            serializer_class = DroneSerializer 
            name = 'drone-detail' 
         
         
        class PilotList(generics.ListCreateAPIView): 
            queryset = Pilot.objects.all() 
            serializer_class = PilotSerializer 
            name = 'pilot-list' 
         
         
        class PilotDetail(generics.RetrieveUpdateDestroyAPIView): 
            queryset = Pilot.objects.all() 
            serializer_class = PilotSerializer 
            name = 'pilot-detail' 
         
         
        class CompetitionList(generics.ListCreateAPIView): 
            queryset = Competition.objects.all() 
            serializer_class = PilotCompetitionSerializer 
            name = 'competition-list' 
         
         
        class CompetitionDetail(generics.RetrieveUpdateDestroyAPIView): 
            queryset = Competition.objects.all() 
            serializer_class = PilotCompetitionSerializer 
            name = 'competition-detail' 



- Generalizing and Mixing Behavior

- Working with Routing and Endpoints

- Making Requests that Interact with Resources that have Relationships
------------------------------------------------------
CHAPTER 3 - CREATING API VIEWS
------------------------------------------------------

- Creating Django Views Combined With Serializer Classes

    Now, we'll create Django views that use the 'ToySerializer' class we created
      previously to return JSON representations of the entities for each HTTP
      request we will handle.


    # In toys/views.py
    from django.shortcuts import render 
    from django.http import HttpResponse 
    from django.views.decorators.csrf import csrf_exempt 
    from rest_framework.renderers import JSONRenderer 
    from rest_framework.parsers import JSONParser 
    from rest_framework import status 
    from toys.models import Toy 
    from toys.serializers import ToySerializer 
     
     
    class JSONResponse(HttpResponse): 
        def __init__(self, data, **kwargs): 
            content = JSONRenderer().render(data) 
            kwargs['content_type'] = 'application/json' 
            super(JSONResponse, self).__init__(content, **kwargs) 
     
     
    @csrf_exempt 
    def toy_list(request): 
        if request.method == 'GET': 
            toys = Toy.objects.all() 
            toys_serializer = ToySerializer(toys, many=True) 
            return JSONResponse(toys_serializer.data) 
    
        elif request.method == 'POST': 
            toy_data = JSONParser().parse(request) 
            toy_serializer = ToySerializer(data=toy_data) 
            if toy_serializer.is_valid(): 
                toy_serializer.save() 
                return JSONResponse(toy_serializer.data, \
                    status=status.HTTP_201_CREATED) 
            return JSONResponse(toy_serializer.errors, \
                status=status.HTTP_400_BAD_REQUEST) 
     
     
    @csrf_exempt 
    def toy_detail(request, pk): 
        try: 
            toy = Toy.objects.get(pk=pk) 
        except Toy.DoesNotExist: 
            return HttpResponse(status=status.HTTP_404_NOT_FOUND) 
     
        if request.method == 'GET': 
            toy_serializer = ToySerializer(toy) 
            return JSONResponse(toy_serializer.data) 
     
        elif request.method == 'PUT': 
            toy_data = JSONParser().parse(request) 
            toy_serializer = ToySerializer(toy, data=toy_data) 
            if toy_serializer.is_valid(): 
                toy_serializer.save() 
                return JSONResponse(toy_serializer.data) 
            return JSONResponse(toy_serializer.errors, \
                status=status.HTTP_400_BAD_REQUEST) 
     
        elif request.method == 'DELETE': 
            toy.delete() 
            return HttpResponse(status=status.HTTP_204_NO_CONTENT)



- CSRF Exemption

    Here, we use the '@csrf_exempt' decorator in 2 functions that ensure the view sets a
      CSRF token.  We're just doing this to make testing easier, since our service is
      not production ready for now.



- Routing URLs to Views and Functions

    Now, we need to create a 'urls.py' file in the toys folder which matches regexes to
      functions defined in the 'views.py' file.

    # In toys/urls.py
    from django.conf.urls import url 
    from toys import views 
 
    urlpatterns = [ 
        url(r'^toys/$', views.toy_list), 
        url(r'^toys/(?P<pk>[0-9]+)$', views.toy_detail), 
    ] 


    And, we also need to update 'restful01/restful01/urls.py'.  This file defines the 
      root URL configurations, so we must include the patterns from 'toys/urls.py'.

    # In restful01/restful01/urls.py
    from django.conf.urls import url, include 

    urlpatterns = [
        url(r'^', include('toys.urls')),
    ]



- Launching Django Development Server

    # Start development server
    python manage.py runserver

    # To make our server callable from other machines on our LAN, we specify that
    #   0.0.0.0 is the IPv4 address that should be used.  Then, the development server
    #   will listen on every interface on port 8000.  Note that we'll also have to 
    #   open port 8000 on our firewalls.
    python manage.py runserver 0.0.0.0:8000



- Making GET Requests

    # GET request with cURL
    curl -X GET localhost:8000/toys/

    # Include response headers
    curl -iX GET localhost:8000/toys/


    # Use HTTPie in instead for better formatting
    http :8000/toys/

    # Omit headers from response
    http -b :8000/toys/



- Making POST Requests

    # cURL POST request
    curl -iX POST 
         -H "Content-Type: application/json" 
         -d '{"name":"PvZ 2 puzzle", 
              "description":"Plants vs Zombies 2 puzzle",    
              "toy_category":"Puzzle", 
              "was_included_in_home": "false", 
              "release_date": "2017-10-08T01:01:00.776594Z"}' 
         localhost:8000/toys/

    # Equivalent HTTPie request
    http POST :8000/toys/ name="PvZ 2 puzzle" 
                          description="Plants vs Zombies 2 puzzle" toy_category="Puzzle" was_included_in_home=false 
                          release_date="2017-10-08T01:01:00.776594Z"

    # Either of these will return this response
    HTTP/1.1 201 Created
    Date: Sat, 02 Nov 2019 05:37:10 GMT
    Server: WSGIServer/0.2 CPython/3.7.1
    Content-Type: application/json
    X-Frame-Options: SAMEORIGIN
    Content-Length: 171

    {"pk":3,
    "name":"PvZ 2 puzzle",
    "description":"Plants vs Zombies 2 puzzle",
    "release_date":"2017-10-08T01:01:00.776594Z",
    "toy_category":"Puzzle",
    "was_included_in_home":false}



- Making HTTP PUT Requests

    - Example of Successful Request

        # httpie Request
        http PUT :8000/toys/4 name="PvZ 3 puzzle" 
                              description="Plants vs Zombies 3 puzzle" 
                              toy_category="Puzzles & Games" 
                              was_included_in_home=false release_date="2017-10-08T01:01:00.776594Z"
    
        # Curl Request
        curl -iX PUT -H "Content-Type: application/json" 
                     -d '{"name":"PvZ 3 puzzle", 
                          "description":"Plants vs Zombies 3 puzzle", 
                          "toy_category":"Puzzles & Games", 
                          "was_included_in_home": "false", 
                          "release_date": "2017-10-08T01:01:00.776594Z"}' 
                     localhost:8000/toys/4

        # Response to either
            HTTP/1.0 200 OK
        Content-Length: 180
        Content-Type: application/json
        Date: Tue, 10 Oct 2017 17:06:43 GMT
        Server: WSGIServer/0.2 CPython/3.6.2
        X-Frame-Options: SAMEORIGIN
        
        {
            "description": "Plants vs Zombies 3 puzzle", 
            "name": "PvZ 3 puzzle", 
            "pk": 4, 
            "release_date": "2017-10-08T01:01:00.776594Z", 
            "toy_category": "Puzzles & Games", 
            "was_included_in_home": false
        }


    - Invalid Requests

        # Return response if validation failed
        HTTP/1.0 400 Bad Request
        Content-Length: 129
        Content-Type: application/json
        Date: Tue, 10 Oct 2017 17:23:46 GMT
        Server: WSGIServer/0.2 CPython/3.6.2
        X-Frame-Options: SAMEORIGIN
        
        {
            "description": [
                "This field is required."
            ], 
            "release_date": [
                "This field is required."
            ], 
            "toy_category": [
                "This field is required."
            ]
        }
------------------------------------------------------
CHAPTER 2 - MODELS, MIGRATIONS, AND SERIALIZATION
------------------------------------------------------

- Required Fields for Toy Entity

    - Integer Identifier
    - Name
    - Description (Optional)
    - Category
    - Release Date
    - Boolean value indicating whether toy has been on homepage at least once



- HTTP Verbs to Implement

    Verb      Scope                    Semantics                     URL
    ---------------------------------------------------------------------------
    GET       Toy                      Single Toy                    /toys/{id}
    GET       Collection of Toys       All toys, sorted by name      /toys
    POST      Collection of Toys       Create new toy                /toys
    PUT       Toy                      Update existing toy           /toys/{id}
    DELETE    Toy                      Delete existing toy           /toys/{id}


    For GET single toy requests, 
      If successful, return '200 OK' and the requested toy as JSON
      Else return '404 Not Found'

    For GET all toy requests,
      If successful, return '200 OK' and the list of toys as JSON

    For POST requests, 
      We pass in the JSON for the new toy.
      If successful, return '201 Created' and the new toy as JSON
      Else return '400 Bad Request'

    For PUT requests,
      If successful, return '200 OK' and the updated toy as JSON
      Else If the necessary data to update the toy wasn't provided, return '400 Bad Request'
      Else If the toy with the requested id isn't found, return '404 Not Found'

    For DELETE requests,
      If successful, return '204 No Content'
      Else return '404 Not Found'



- Creating the Toy Model

    In the 'toys/models.py' file, we add the model.  Note that Django automatically adds
      the auto-increment integer primary key column 'id', and maps the column to the
      'pk' attribute for the model.


    from django.db import models

    class Toy(models.Model):
        created = models.DateTimeField(auto_now_add=True)
        name = models.CharField(max_length=150, blank=False, default='')
        description = models.CharField(max_length=250, blank=True, default='')
        toy_category = models.CharField(max_length=200, blank=False, default='')
        release_date = models.DateTimeField()
        was_included_in_home = models.BooleanField(default=False)

        class Meta:
            ordering = ('name',)



- Creating the Initial Migration

    By default, for the time being, we are using SQLite, so we don't have to make any
      changes to the default ORM configuration.  The automatically generated migration
      is a subclass of 'django.db.migrations.Migration'.  


    # Create the migration
    $ cd restful01
    $ python manage.py makemigrations toys


    # In toys/migrations/0001_initial.py
    from django.db import migrations, models 
 
    class Migration(migrations.Migration): 
     
        initial = True 
     
        dependencies = [ 
        ] 
     
        operations = [ 
            migrations.CreateModel( 
                name='Toy', 
                fields=[ 
                    ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False,     
                                            verbose_name='ID')), 
                    ('created', models.DateTimeField(auto_now_add=True)), 
                    ('name', models.CharField(default='', max_length=150)), 
                    ('description', models.CharField(blank=True, default='', max_length=250)), 
                    ('toy_category', models.CharField(default='', max_length=200)), 
                    ('release_date', models.DateTimeField()), 
                    ('was_included_in_home', models.BooleanField(default=False)), 
                ], 
                options={ 
                    'ordering': ('name',), 
                }, 
            ), 
        ]


    # Now, run the migrations, and we'll see that the SQLite file is created
    python manage.py migrate



- Analyzing the Database

    # See tables in sqlite3 db
    sqlite3 db.sqlite3 ".tables"

    # Run queries
    sqlite3 db.sqlite3 "SELECT * FROM toys_toy ORDER BY name;"


    The sqlite database engine and file name are specified in 'restful01/settings.py'.

    DATABASES = { 
        'default': { 
            'ENGINE': 'django.db.backends.sqlite3', 
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), 
        } 
    }



- Default Tables

    After executing the first migration, the database will have the following tables by
      default:

      1. auth_group: authentication groups
      2. auth_group_permissions: permissions for authentication groups
      3. auth_permission: stores permissions for authentication

      4. auth_user: stores authentication users
      5. auth_user_groups: stores authentication user groups
      6. auth_user_groups_permissions: stores permissions for authentication user groups

      7. django_admin_log: stores the django admin log
      8. django_content_type: stores django content types
      9. django migrations: stores scripts generated by migrations, and the date/time applied
      10. django sessions: stores django sessions

      11. toys_toy: persists the 'Toys' model
      12. sqlite_sequence: Stores sequences for SQLite primary keys with autoincrements



- Django-Generated Tables

    # Retrieve the SQL used to create the 'toys_toy' table
    sqlite3 db.sqlite3 ".schema toys_toy"

    CREATE TABLE IF NOT EXISTS "toys_toy" 
    (
        "id" integer NOT NULL PRIMARY KEY AUTOINCREMENT,
        "created" datetime NOT NULL, 
        "name" varchar(150) NOT NULL, 
        "description" varchar(250) NOT NULL, 
        "toy_category" varchar(200) NOT NULL, 
        "release_date" datetime NOT NULL, 
        "was_included_in_home" bool NOT NULL
    );
  


- Serialization and Deserialization

    Serializers = mediators between model instances and Python primitives
    Parsers and Renderers = mediators between Python primitives and HTTP requests/responses


    To manage serialization and deserialization, we create a subclass of
      'rest_framework.serializers.Serializer'.

    # In 'toys/serializers.py'
    from rest_framework import serializers 
    from toys.models import Toy 
     
    class ToySerializer(serializers.Serializer): 
        pk = serializers.IntegerField(read_only=True) 
        name = serializers.CharField(max_length=150) 
        description = serializers.CharField(max_length=250) 
        release_date = serializers.DateTimeField() 
        toy_category = serializers.CharField(max_length=200) 
        was_included_in_home = serializers.BooleanField(required=False) 
     
        def create(self, validated_data): 
            return Toy.objects.create(**validated_data) 
     
        def update(self, instance, validated_data): 
            instance.name = validated_data.get('name', instance.name)         
            instance.description = validated_data.get('description', instance.description) 
            instance.release_date = validated_data.get('release_date', instance.release_date) 
            instance.toy_category = validated_data.get('toy_category', instance.toy_category)
            instance.was_included_in_home = validated_data.get('was_included_in_home',
                                                               instance.was_included_in_home) 
            instance.save()
            return instance



- Working with the Django Shell

    # Launch the Django Python shell
    $ cd restful01
    $ python manage.py shell


    # Imports
    >>> from datetime import datetime 
    >>> from django.utils import timezone 
    >>> from django.utils.six import BytesIO 
    >>> from rest_framework.renderers import JSONRenderer 
    >>> from rest_framework.parsers import JSONParser 
    >>> from toys.models import Toy 
    >>> from toys.serializers import ToySerializer 


    # Create new toys
    >>> toy_release_date = timezone.make_aware(datetime.now(), 
                                               timezone.get_current_timezone()) 

    >>> toy1 = Toy(name='Snoopy talking action figure', 
                   description='Snoopy speaks five languages', 
                   release_date=toy_release_date, 
                   toy_category='Action figures', 
                   was_included_in_home=False) 
    >>> toy1.save() 

    >>> toy2 = Toy(name='Hawaiian Barbie', 
                   description='Barbie loves Hawaii', 
                   release_date=toy_release_date, 
                   toy_category='Dolls', 
                   was_included_in_home=True) 
    >>> toy2.save() 


    # Now, test our serializer
    >>> serializer_for_toy1 = ToySerializer(toy1)
    >>> serializer_for_toy1.data

    {
        'pk': 1, 
        'name': 'Snoopy talking action figure', 
        'description': 'Snoopy speaks five languages', 
        'release_date': '2017-10-09T12:11:37.090335Z', 
        'toy_category': 'Action figures', 
        'was_included_in_home': False
    }    


    # Render our serialized object to json
    >>> json_renderer = JSONRenderer()
    >>> toy1_json = json_renderer.render(serializer_for_toy1.data)

    b'{"pk":1,
       "name":"Snoopy talking action figure",
       "description":"Snoopy speaks five languages",
       "release_date":"2019-04-15T04:00:56.823265Z",
       "toy_category":"Action figures",
       "was_included_in_home":false}'
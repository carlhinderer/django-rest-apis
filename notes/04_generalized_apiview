----------------------------------------------------------------
CHAPTER 4 - USING GENERALIZED BEHAVIOR FROM THE APIVIEW CLASS
----------------------------------------------------------------

- Taking Advantage of Model Serializers

    - We can use leverage the fact that the 'rest_framework.serializers.ModelSerializer'
        automatically populates default values and default validators, along with providing
        default implementations for the 'create' and 'update' methods.

      We'll subclass our serializer from this class instead of 'serializers.Serializer' to 
        get this behavior.


        # restful01/toys/serializers.py
        from rest_framework import serializers
        from toys.models import Toy

        class ToySerializer(serializers.ModelSerializer):
            class Meta:
                model = Toy
                fields = ('id',
                          'name',
                          'description',
                          'release_date',
                          'toy_category',
                          'was_included_in_home')



    - The 'model' attribute specifies the model class related to the serializer.
      The 'fields' attribute specifies the list of fields we want to be included in serialization.



- Understanding Accepted and Returned Content Types

    - So far, our web service has been using JSON for the response body.  Our existing 
        ApiView class declares a JSONResponse and 2 function-based views.  

      Those functions:
        - return a JSONResponse when it is necessary to return a JSON response
        - return an HTTPResponse when the response is just a HTTP status code


    - Right now, even if we send a request to our web services with 'Accept: application/html',
        they would still return results with 'Content-Type: application/json'.  We don't provide
        support for other formats yet.

        # Returns json response
        $ http :8000/toys/ Accept:application/json
        $ curl -H "Accept: application/json" -iX GET localhost:8000/toys/

        # Still returns json response
        $ http :8000/toys/ Accept:text/html
        $ curl -H "Accept: text/html" -iX GET localhost:8000/toys/

        # Either way the response has this header
        Content-Type: application/json



- Making Unsupported HTTP OPTIONS Requests

    - Sometimes, we don't know which HTTP methods a resource supports.  To find out, we can
        send an HTTP OPTIONS request.  

        # Get which HTTP verbs are supported, these will fail
        $ http OPTIONS :8000/toys/
        $ curl -iX OPTIONS localhost:8000/toys/

        # These will also fail
        $ http OPTIONS :8000/toys/2
        $ curl -iX OPTIONS localhost:8000/toys/2


    - The requests fail currently, and the stack trace of what went wrong is returned.  Note that
        the stack traces are only returned because we have 'debug' set to true, and this must be
        turned off in production.



- Understanding Decorators 

    - We want to make our app respond to OPTIONS requests.  To do this, we take advantage of
        the '@api_view' decorator declared in the 'rest_framework.decorators' module.

      The '@api_view' decorator allows us to specify which HTTP verbs can be processed by 
        each function.  If a verb isn't included in the 'http_method_names' argument passed in,
        a HTTP 405 'Method Not Allowed' status code will be sent in the response.


    - This will ensure we don't have an unexpected error in Django when an invalid verb name is
        passed in.


    - The 'api_view' decorator is a wrapper that converts a function-based view into a subclass
        of 'rest_framework.views.APIView' class.



- Using the Decorator

    We'll change the 'restful01/toys/views.py' file to use the 'api_view' decorator.  Note that
      we've also gotten rid of the 'JSONResponse' class definition.

    # restful01/toys/views.py
    from django.shortcuts import render 

    from rest_framework import status 
    from rest_framework.decorators import api_view 
    from rest_framework.response import Response 
    
    from toys.models import Toy 
    from toys.serializers import ToySerializer

     
     
    @api_view(['GET', 'POST']) 
    def toy_list(request): 
        if request.method == 'GET': 
            toys = Toy.objects.all() 
            toys_serializer = ToySerializer(toys, many=True) 
            return Response(toys_serializer.data) 
     
        elif request.method == 'POST': 
            toy_serializer = ToySerializer(data=request.data) 
            if toy_serializer.is_valid(): 
                toy_serializer.save() 
                return Response(toy_serializer.data, status=status.HTTP_201_CREATED) 
            return Response(toy_serializer.errors, status=status.HTTP_400_BAD_REQUEST) 
     
     
    @api_view(['GET', 'PUT', 'DELETE']) 
    def toy_detail(request, pk): 
        try: 
            toy = Toy.objects.get(pk=pk) 
        except Toy.DoesNotExist: 
            return Response(status=status.HTTP_404_NOT_FOUND) 
     
        if request.method == 'GET': 
            toy_serializer = ToySerializer(toy) 
            return Response(toy_serializer.data) 
     
        elif request.method == 'PUT': 
            toy_serializer = ToySerializer(toy, data=request.data) 
            if toy_serializer.is_valid(): 
                toy_serializer.save() 
                return Response(toy_serializer.data) 
            return Response(toy_serializer.errors, status=status.HTTP_400_BAD_REQUEST) 
     
        elif request.method == 'DELETE': 
            toy.delete() 
            return Response(status=status.HTTP_204_NO_CONTENT)



- Updated Functions

    - The new code applies the '@api_view' decorator for both functions.  In addition, the 
        new code removes the 'JSONResponse' class and uses the more generic 
        'rest_framework.response.Response' class.


    - We got rid of the 'rest_framework.parsers.JSONParser' so that different parsers can be used
        for different content.  The new code replaces these lines:

        # Old serialization
        toy_data = JSONParser().parse(request)
        toy_serializer = ToySerializer(data=toy_data)

        # New serialization
        toy_serializer = ToySerializer(data=request.data)



- Taking Advantage of Content Negotiation Classes

    - The 'APIView' class defines default settings for each view that we can override by 
        specifying the desired values in the settings module ('restful01/settings.py').  It is
        also possible to override these class attributes in subclasses.

      In this case, we won't change any of the defaults, but let's look at one of them:

        # Value of DEFAULT_PARSER_CLASSES setting
        ( 
            'rest_framework.parsers.JSONParser', 
            'rest_framework.parsers.FormParser', 
            'rest_framework.parsers.MultiPartParser' 
        ) 


    - When we use the '@api_view' decorator, the RESTful web service will be able to handle any
        of these content types:

        'application/json'                   # Parsed by 'rest_framework.parsers.JSONParser'
        'application/x-www-form-urlencoded'  # Parsed by 'rest_framework.parsers.FormParser'
        'multipart/form-data'                # Parsed by 'rest_framework.parsers.MultiPartParser'


    - When we access the 'request.data' attribute in the functions, the Django REST framework
        examines the value of the 'Content-Type' header in the incoming request and determines
        the appropriate parser to parse the request content.


    - The default renderer classes is similar:

        # Value of DEFAULT_RENDERER_CLASSES
        ( 
            'rest_framework.renderers.JSONRenderer', 
            'rest_framework.renderers.BrowsableAPIRenderer', 
        ) 

      We can render these content types:

        'application/json'                 # Rendered by 'rest_framework.response.JSONRenderer'
        'text/html'                        # Rendered by 'rest_framework.response.BrowsableAPIRenderer'



    - By default, the value for 'DEFAULT_CONTENT_NEGOTIATION_CLASS' is 
        'rest_framework.negotiation.DefaultContentNegotiation'.  When we use the decorator, the web
        service will use the content negotiator to select the appropriate renderer for the response,
        based on the incoming request.

      That way, when a request specifies that it will accept 'text/html', the content negotiation
        class will select the 'BrowsableAPIRenderer' to render the response and generate 'text/html'
        instead of 'application/json'.



- Making Supported HTTP OPTIONS Requests

    - Now that we are using 'api_view', our OPTIONS requests are supported.

        # Toys list OPTIONS request
        $ http OPTIONS :8000/toys/
        $ curl -iX OPTIONS localhost:8000/toys/

        HTTP/1.0 200 OK
        Allow: POST, OPTIONS, GET
        Content-Length: 167
        Content-Type: application/json
        Date: Mon, 16 Oct 2017 04:28:32 GMT
        Server: WSGIServer/0.2 CPython/3.6.2
        Vary: Accept, Cookie
        X-Frame-Options: SAMEORIGIN
        
        {
            "description": "", 
            "name": "Toy List", 
            "parses": [
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            ], 
            "renders": [
                "application/json", 
                "text/html"
            ]
        }
 

        # Toys detail OPTIONS request
        $ http OPTIONS :8000/toys/2
        $ curl -iX OPTIONS localhost:8000/toys/2

        HTTP/1.0 200 OK
        Allow: DELETE, PUT, OPTIONS, GET
        Content-Length: 169
        Content-Type: application/json
        Date: Mon, 16 Oct 2017 04:30:04 GMT
        Server: WSGIServer/0.2 CPython/3.6.2
        Vary: Accept, Cookie
        X-Frame-Options: SAMEORIGIN
        
        {
            "description": "", 
            "name": "Toy Detail", 
            "parses": [
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            ], 
            "renders": [
                "application/json", 
                "text/html"
            ]
        }
  


- Working with Different Content Types

    - When we tested POST and PUT requests, we had to specify the content type as 
        'application/json' to indicate to curl that the request data is json.  We had to add
        that because curl's default content type is 'application/x-www-form-urlencoded'.

        # Test POST request
        $ curl -iX POST -H "Content-Type: application/json" ...


    - Now, our service goes beyond json and can also parse 'application/x-www-form-urlencoded'
        and 'multipart/form-data'.  We can pass in form data and our requests will be handled.

        # HTTPie request with form data (-f for form)
        $ http -f POST :8000/toys/ name="Ken in Rome" 
                                   description="Ken loves Rome" 
                                   toy_category="Dolls" 
                                   was_included_in_home=false 
                                   release_date="2017-10-09T12:11:37.090335Z"

        # curl request with form data (don't have to send content type)
        $ curl -iX POST -d '{"name":"Ken in Rome", 
                             "description": "Ken loves Rome", 
                             "toy_category":"Dolls", 
                             "was_included_in_home": "false", 
                             "release_date": "2017-10-09T12:11:37.090335Z"}' 
                        localhost:8000/toys/ 


    - The previous request will compose and send the following HTTP request:

        POST http://localhost:8000/toys/

        Content-Type: 'application/x-www-form-urlencoded'

        Data: 
        name=Ken+in+Rome&
        description=Ken+loves+Rome&
        toy_category=Dolls&
        was_included_in_home=false&
        release_date=2017-10-09T12%3A11%3A37.090335Z


        # Response (Still JSON)
        HTTP/1.0 201 Created
        Allow: GET, OPTIONS, POST
        Content-Length: 157
        Content-Type: application/json
        Date: Mon, 16 Oct 2017 04:40:02 GMT
        Server: WSGIServer/0.2 CPython/3.6.2
        Vary: Accept, Cookie
        X-Frame-Options: SAMEORIGIN
        {
            "description": "Ken loves Rome",
            "id": 6,
            "name": "Ken in Rome",
            "release_date": "2017-10-09T12:11:37.090335Z",
            "toy_category": "Dolls",
            "was_included_in_home": false
        }



- Sending HTTP Requests with Unsupported HTTP Verbs

    - Now, we will once again try sending a request with an unsupported verb.  We will still get
        a 405 error.

        # Send unsupported verb request
        $ http PATCH :8000/toys/
        $ curl -iX PATCH localhost:8000/toys/


        # Response
        HTTP/1.0 405 Method Not Allowed
        Allow: GET, OPTIONS, POST
        Content-Length: 42
        Content-Type: application/json
        Date: Mon, 16 Oct 2017 04:41:35 GMT
        Server: WSGIServer/0.2 CPython/3.6.2
        Vary: Accept, Cookie
        X-Frame-Options: SAMEORIGIN
        
        {
            "detail": "Method \"PATCH\" not allowed."
        }